generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(dbgenerated("gen_random_uuid()"))
  email                String               @unique
  avatarUrl            String?              @map("avatar_url")
  password             String
  createdAt            DateTime             @default(now()) @map("created_at")
  isVerified           Boolean              @default(false) @map("is_verified")
  firstName            String               @map("first_name")
  lastName             String               @map("last_name")
  hardSkills           String[]             @default([]) @map("hard_skills")
  softSkills           String[]             @default([]) @map("soft_skills")
  roleId               String               @map("role_id")
  educations           Education[]
  logEvents            LogEvent[]
  loginAttempt         LoginAttempt?
  ownProjects          Project[]
  socials              Social[]
  tasks                Task[]
  role                 Role                 @relation(fields: [roleId], references: [id])
  verificationAttempts VerificationAttempt?
  verificationToken    VerificationToken?
  projectRoles         ProjectRole[]        @relation("UserProjectRoles")

  @@map("users")
}

model Role {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  roleName String @unique @map("role_name")
  users    User[]

  @@map("roles")
}

model VerificationToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model VerificationAttempt {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_attempts")
}

model RefreshPasswordToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  email     String   @unique

  @@map("refresh_password_tokens")
}

model RefreshPasswordAttempt {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  email     String

  @@map("refresh_password_attempts")
}

model Project {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  projectName       String          @map("project_name")
  description       String
  status            String
  createdAt         DateTime        @default(now()) @map("created_at")
  slackUrl          String          @map("slack_url")
  logoUrl           String          @map("logo_url")
  participantsCount Int             @map("participiants_count")
  ownerId           String          @map("owner_id")
  categoryId        String          @map("category_id")
  boards            Board[]
  documents         Document[]
  roles             ProjectRole[]
  category          ProjectCategory @relation(fields: [categoryId], references: [id])
  owner             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([status, participantsCount])
  @@index([status, categoryId])
  @@index([participantsCount, categoryId])
  @@index([categoryId, status, participantsCount])
  @@index([status])
  @@index([categoryId])
  @@index([participantsCount])
  @@map("projects")
}

model Document {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  url       String
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ProjectRole {
  id         String          @id @default(dbgenerated("gen_random_uuid()"))
  slots      Int
  projectId  String          @map("project_id")
  roleTypeId String          @map("role_type_id")
  project    Project         @relation(fields: [projectId], references: [id])
  roleType   ProjectRoleType @relation(fields: [roleTypeId], references: [id])
  users      User[]          @relation("UserProjectRoles")

  @@map("project_roles")
}

model ProjectRoleType {
  id       String        @id @default(dbgenerated("gen_random_uuid()"))
  roleName String        @unique @map("role_name")
  roles    ProjectRole[]

  @@map("project_role_types")
}

model ProjectCategory {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  categoryName String    @unique @map("category_name")
  projects     Project[]

  @@map("project_categories")
}

model Board {
  id        String       @id @default(dbgenerated("gen_random_uuid()"))
  boardName String       @map("board_name")
  projectId String       @map("project_id")
  project   Project      @relation(fields: [projectId], references: [id])
  columns   TaskStatus[]
  tasks     Task[]

  @@map("boards")
}

model TaskStatus {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  name    String
  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id])

  @@map("task_statuses")
}

model Task {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  taskName    String   @map("task_name")
  description String
  priority    String
  deadline    DateTime
  boardId     String   @map("board_id")
  userId      String?  @map("user_id")
  board       Board    @relation(fields: [boardId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model LogEvent {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  message String
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id])

  @@map("log_events")
}

model Education {
  id          String @id @default(dbgenerated("gen_random_uuid()"))
  userId      String @map("user_id")
  institution String
  speciality  String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Social {
  id          String @id @default(dbgenerated("gen_random_uuid()"))
  userId      String @map("user_id")
  profileLink String @map("profile_link")
  socialName  String @map("social_name")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("socials")
}

model LoginAttempt {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  attemptsCount Int       @map("attempts_count")
  blockedUntil  DateTime? @map("blocked_until")
  userId        String    @unique @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
}
